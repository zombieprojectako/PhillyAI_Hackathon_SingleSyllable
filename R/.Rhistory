# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
# Libraries
library(readr)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
#data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
# Lets start with a standard glm
model <- glm(TARGET_act_cycle ~ user_id + acne + backache + bloating + cramp + diarrhea + dizzy + headache + mood + nausea + sore + est_cycle + est_period + act_period, data=train)
predicted <- predict(model, test, type=c("response" ))
# actual results
results <- as.data.frame(cbind(test$TARGET_act_cycle, predicted))
results$err = abs(results$V1-results$predicted)
mean(results$err)
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = 28.75
results2$err = abs(results2$V1-results2$predicted)
mean(results2$err)
(mean(results2$err)- mean(results$err))/mean(results2$err)
# Libraries
library(readr)
library(randomForest)
install.packages("randomForest")
library(randomForest)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
cols <- c('user_id', 'acne', 'backache',
'bloating', 'cramp', 'diarrhea',
'dizzy', 'headache', 'mood', 'nausea',
'sore', 'est_cycle', 'est_period', 'act_period')
rf <- randomForest(TARGET_act_cycle ~ ., data=train[,cols], ntree=20)
rf <- randomForest(train$TARGET_act_cycle ~ ., data=train[,cols], ntree=20)
# Libraries
library(readr)
library(randomForest)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
#data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
cols <- c('user_id', 'acne', 'backache',
'bloating', 'cramp', 'diarrhea',
'dizzy', 'headache', 'mood', 'nausea',
'sore', 'est_cycle', 'est_period', 'act_period')
rf <- randomForest(train$TARGET_act_cycle ~ ., data=train[,cols], ntree=20)
predicted <- predict(rf, test[,cols])
# actual results
results <- as.data.frame(cbind(test$TARGET_act_cycle, predicted))
results$err = abs(results$V1-results$predicted)
mean(results$err)
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = 28.75
results2$err = abs(results2$V1-results2$predicted)
mean(results2$err)
(mean(results2$err)- mean(results$err))/mean(results2$err)
View(results)
View(results2)
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model.R')
mean(results$err)
mean(results2$err)
(mean(results2$err)- mean(results$err))/mean(results2$err)
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model.R')
rf
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/work.R')
model
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model_02.R')
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model_02.R')
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model.R')
library(gbm)
install.packages("gbm")
mse(results$V1, results$predicted)
MSE(results$V1, results$predicted)
install.packages("Metrics")
library(Metrics)
results$err = mse(results$V1-results$predicted)
library(readr)
library(gbm)
library(Metrics)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
cols <- c('user_id', 'acne', 'backache',
'bloating', 'cramp', 'diarrhea',
'dizzy', 'headache', 'mood', 'nausea',
'sore', 'est_cycle', 'est_period', 'act_period')
rf <- train(train$TARGET_act_cycle ~ ., data=train[,cols], ntree=200)
# Libraries
library(readr)
library(randomForest)
library(Metrics)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
#data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
cols <- c('user_id', 'acne', 'backache',
'bloating', 'cramp', 'diarrhea',
'dizzy', 'headache', 'mood', 'nausea',
'sore', 'est_cycle', 'est_period', 'act_period')
rf <- randomForest(train$TARGET_act_cycle ~ ., data=train[,cols], ntree=500)
predicted <- predict(rf, test[,cols])
# actual results
results <- as.data.frame(cbind(test$TARGET_act_cycle, predicted))
results$err = mse(results$V1-results$predicted)
mse(results$V1-results$predicted)
results$err = (results$V1-results$predicted)^2
print(mean(results$err))
print(sqr(mean(results$err)))
print(sqrt(mean(results$err)))
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = 28.75
results2$err = (results2$V1-results2$predicted)^2
print(sqrt(mean(results2$err)))
print(sqrt(mean(results2$err))- sqrt(mean(results$err)))/sqrt(mean(results2$err)))
print(sqrt(mean(results2$err))- sqrt(mean(results$err)))/sqrt(mean(results2$err))
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model.R')
mse = mean(results$err)
print(mse)
print(sqrt(mse))
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = 28.75
results2$err = (results2$V1-results2$predicted)^2
mse = mean(results2$err)
print(sqrt(mse))
mse_rf = mean(results$err)
print(sqrt(mse_rf))
mse_ne = mean(results2$err)
print(sqrt(mse_ne))
# Improvement
net_improvement = (mse_ne - mse_rf)/mse_ne
print(net_improvement)
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model.R')
# Libraries
library(readr)
library(gbm)
library(Metrics)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
cols <- c('user_id', 'acne', 'backache',
'bloating', 'cramp', 'diarrhea',
'dizzy', 'headache', 'mood', 'nausea',
'sore', 'est_cycle', 'est_period', 'act_period')
g
gbmModel = gbm(formula = TARGET_act_cycle ~ user_id + acne + backache +
bloating + cramp + diarrhea + dizzzy + headache + mood +
nausea + sore + est_cycle + est_period + act_period,
distribution = "gaussian",
data = train,
n.trees = 2500,
shrinkage = .01,
n.minobsinnode = 20)
gbmModel = gbm(formula = TARGET_act_cycle ~ user_id + acne + backache +
bloating + cramp + diarrhea + dizzy + headache + mood +
nausea + sore + est_cycle + est_period + act_period,
distribution = "gaussian",
data = train,
n.trees = 2500,
shrinkage = .01,
n.minobsinnode = 20)
# Libraries
library(readr)
library(gbm)
library(Metrics)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
# data$user_id <- as.factor(data$user_id)
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
gbmModel = gbm(formula = TARGET_act_cycle ~ user_id + acne + backache +
bloating + cramp + diarrhea + dizzy + headache + mood +
nausea + sore + est_cycle + est_period + act_period,
distribution = "gaussian",
data = train,
n.trees = 2500,
shrinkage = .01,
n.minobsinnode = 20)
print(gbmModel)
best.iter <- gbm.perf(gbmModel, method = "OOB")
print(best.iter)
predicted <- predict(gbmModel,
newdata = test,
n.trees = best.iter,
type = "gaussian")
predicted <- predict(gbmModel,
newdata = test,
n.trees = best.iter,
type = "response")
# actual results
results <- as.data.frame(cbind(test$TARGET_act_cycle, predicted))
results$err = mse(results$V1-results$predicted)
results$err = (results$V1-results$predicted)^2
mse_rf = mean(results$err)
print(sqrt(mse_rf))
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = 28.75
results2$err = (results2$V1-results2$predicted)^2
mse_ne = mean(results2$err)
print(sqrt(mse_ne))
# Improvement
net_improvement = (mse_ne - mse_rf)/mse_ne
print(net_improvement)
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/gbm.R')
best.iter <- gbm.perf(gbmModel, method = "OOB")
predicted <- predict(gbmModel,
newdata = test,
n.trees = best.iter,
type = "response")
# actual results
results <- as.data.frame(cbind(test$TARGET_act_cycle, predicted))
results$err = (results$V1-results$predicted)^2
mse_rf = mean(results$err)
print(sqrt(mse_rf))
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = 28.75
results2$err = (results2$V1-results2$predicted)^2
mse_ne = mean(results2$err)
print(sqrt(mse_ne))
# Improvement
net_improvement = (mse_ne - mse_rf)/mse_ne
print(net_improvement)
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/gbm.R')
source('~/GitHub/PhillyAI_Hackathon_SingleSyllable/R/scripts/rf_model.R')
# Libraries
library(readr)
library(randomForest)
# Script to predict end dates
set.seed(1234)
data <- read_csv("~/GitHub/PhillyAI_Hackathon_SingleSyllable/data_out/model_sample_02.csv")
# Naive model
ave_cycle = mean(data$TARGET_act_cycle)
print(ave_cycle)
# create test and training sets
inTrain <- sample(1:nrow(data), nrow(data) * 0.85) # select 85% of the items
train <- data[inTrain, ]
test <- data[-inTrain, ]
rm(data, inTrain)
cols <- c('user_id', 'acne', 'backache',
'bloating', 'cramp', 'diarrhea',
'dizzy', 'headache', 'mood', 'nausea',
'sore', 'est_cycle', 'est_period', 'act_period')
rf <- randomForest(train$TARGET_act_cycle ~ ., data=train[,cols], ntree=200)
predicted <- predict(rf, test[,cols])
# actual results
results <- as.data.frame(cbind(test$TARGET_act_cycle, predicted))
results$err = (results$V1-results$predicted)^2
mse_rf = mean(results$err)
print(sqrt(mse_rf))
# Naive Results
results2 <- as.data.frame(cbind(test$TARGET_act_cycle))
results2$predicted = ave_cycle
results2$err = (results2$V1-results2$predicted)^2
mse_ne = mean(results2$err)
print(sqrt(mse_ne))
# Improvement
net_improvement = (mse_ne - mse_rf)/mse_ne
print(net_improvement)
